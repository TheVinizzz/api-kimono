// Script para testar diferentes m√©todos de autentica√ß√£o e endpoints da API dos Correios
require('dotenv').config();
const axios = require('axios');

// URLs da API
const CORREIOS_URLS = {
  homologacao: 'https://apihom.correios.com.br',
  producao: 'https://api.correios.com.br',
  cwsHomologacao: 'https://cwshom.correios.com.br/api',
  cwsProducao: 'https://cws.correios.com.br/api'
};

// Endpoints espec√≠ficos
const CORREIOS_ENDPOINTS = {
  token: {
    autentica: '/token/v1/autentica',
    autenticaCartaoPostagem: '/token/v1/autentica/cartaopostagem'
  },
  cep: {
    consultaV1: '/cep/v1/enderecos',
    consultaV2: '/cep/v2/enderecos',
    consultaCepUnicoV1: '/cep/v1/enderecos/',
    consultaCepUnicoV2: '/cep/v2/enderecos/',
    listaUfs: '/cep/v1/ufs',
    consultaUf: '/cep/v1/ufs/',
    listaLocalidades: '/cep/v1/localidades'
  },
  rastreamento: {
    consulta: '/srorastro/v1/objetos'
  }
};

async function testarCorreiosCompleto() {
  try {
    console.log('üîç Testando diferentes m√©todos de autentica√ß√£o e endpoints da API dos Correios...');
    
    // Configura√ß√µes
    const ambiente = process.env.CORREIOS_AMBIENTE || 'PRODUCAO';
    const idCorreios = process.env.CORREIOS_ID || process.env.CORREIOS_USER;
    const codigoAcesso = process.env.CORREIOS_CODIGO_ACESSO || process.env.CORREIOS_PASSWORD;
    const cartaoPostagem = process.env.CORREIOS_CARTAO_POSTAGEM;
    
    const baseURL = ambiente === 'PRODUCAO' 
      ? CORREIOS_URLS.producao 
      : CORREIOS_URLS.homologacao;
    
    const cwsURL = ambiente === 'PRODUCAO'
      ? CORREIOS_URLS.cwsProducao
      : CORREIOS_URLS.cwsHomologacao;
    
    console.log(`üîß Ambiente: ${ambiente}`);
    console.log(`üîß ID Correios: ${idCorreios}`);
    console.log(`üîß Cart√£o de Postagem: ${cartaoPostagem || 'N√£o configurado'}`);
    console.log(`üîß URL base API: ${baseURL}`);
    console.log(`üîß URL base CWS: ${cwsURL}`);
    
    // Verificar configura√ß√µes
    if (!idCorreios || !codigoAcesso) {
      console.error('‚ùå Configura√ß√£o incompleta. Verifique as vari√°veis de ambiente:');
      console.error('- CORREIOS_ID ou CORREIOS_USER');
      console.error('- CORREIOS_CODIGO_ACESSO ou CORREIOS_PASSWORD');
      return;
    }
    
    // Criar credenciais em formato Base64 para autentica√ß√£o Basic
    const credentials = Buffer.from(`${idCorreios}:${codigoAcesso}`).toString('base64');
    console.log(`üîß Credenciais Base64 geradas (primeiros 10 caracteres): ${credentials.substring(0, 10)}...`);
    
    // Tokens obtidos
    const tokens = {
      api: null,
      apiCartao: null,
      cws: null
    };
    
    // 1. Testar autentica√ß√£o direta na API
    console.log('\nüîë [1] Testando autentica√ß√£o direta na API...');
    try {
      console.log(`üîß URL: ${baseURL}${CORREIOS_ENDPOINTS.token.autentica}`);
      
      const response = await axios({
        method: 'post',
        url: `${baseURL}${CORREIOS_ENDPOINTS.token.autentica}`,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Basic ${credentials}`
        },
        timeout: 30000
      });
      
      console.log(`‚úÖ Status da resposta: ${response.status}`);
      
      if (response.data && response.data.token) {
        console.log(`‚úÖ Token obtido: ${response.data.token.substring(0, 20)}...`);
        console.log(`‚úÖ Expira em: ${response.data.expiraEm || 'N/A'}`);
        console.log(`‚úÖ Ambiente retornado: ${response.data.ambiente || 'N/A'}`);
        
        tokens.api = response.data.token;
      } else {
        console.error('‚ùå Resposta sem token v√°lido');
        console.error('‚ùå Dados da resposta:', JSON.stringify(response.data || {}));
      }
    } catch (authError) {
      console.error('‚ùå Erro na autentica√ß√£o API direta:', authError.message);
      
      if (authError.response) {
        console.error('‚ùå Status da resposta:', authError.response.status);
        console.error('‚ùå Dados da resposta:', JSON.stringify(authError.response.data || {}));
      }
    }
    
    // 2. Testar autentica√ß√£o com cart√£o de postagem
    if (cartaoPostagem) {
      console.log('\nüîë [2] Testando autentica√ß√£o com cart√£o de postagem...');
      try {
        console.log(`üîß URL: ${baseURL}${CORREIOS_ENDPOINTS.token.autenticaCartaoPostagem}`);
        console.log(`üîß Cart√£o de Postagem: ${cartaoPostagem}`);
        
        const response = await axios({
          method: 'post',
          url: `${baseURL}${CORREIOS_ENDPOINTS.token.autenticaCartaoPostagem}`,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': `Basic ${credentials}`
          },
          data: {
            numero: cartaoPostagem
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        
        if (response.data && response.data.token) {
          console.log(`‚úÖ Token obtido: ${response.data.token.substring(0, 20)}...`);
          console.log(`‚úÖ Expira em: ${response.data.expiraEm || 'N/A'}`);
          console.log(`‚úÖ Ambiente retornado: ${response.data.ambiente || 'N/A'}`);
          
          tokens.apiCartao = response.data.token;
        } else {
          console.error('‚ùå Resposta sem token v√°lido');
          console.error('‚ùå Dados da resposta:', JSON.stringify(response.data || {}));
        }
      } catch (cartaoError) {
        console.error('‚ùå Erro na autentica√ß√£o com cart√£o de postagem:', cartaoError.message);
        
        if (cartaoError.response) {
          console.error('‚ùå Status da resposta:', cartaoError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cartaoError.response.data || {}));
        }
      }
    }
    
    // 3. Testar autentica√ß√£o no CWS
    console.log('\nüîë [3] Testando autentica√ß√£o no CWS...');
    try {
      console.log(`üîß URL: ${cwsURL}${CORREIOS_ENDPOINTS.token.autentica}`);
      
      const response = await axios({
        method: 'post',
        url: `${cwsURL}${CORREIOS_ENDPOINTS.token.autentica}`,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Basic ${credentials}`
        },
        timeout: 30000
      });
      
      console.log(`‚úÖ Status da resposta: ${response.status}`);
      
      if (response.data && response.data.token) {
        console.log(`‚úÖ Token obtido: ${response.data.token.substring(0, 20)}...`);
        console.log(`‚úÖ Expira em: ${response.data.expiraEm || 'N/A'}`);
        console.log(`‚úÖ Ambiente retornado: ${response.data.ambiente || 'N/A'}`);
        
        tokens.cws = response.data.token;
      } else {
        console.error('‚ùå Resposta sem token v√°lido');
        console.error('‚ùå Dados da resposta:', JSON.stringify(response.data || {}));
      }
    } catch (cwsError) {
      console.error('‚ùå Erro na autentica√ß√£o CWS:', cwsError.message);
      
      if (cwsError.response) {
        console.error('‚ùå Status da resposta:', cwsError.response.status);
        console.error('‚ùå Dados da resposta:', JSON.stringify(cwsError.response.data || {}));
      }
    }
    
    // Verificar se temos pelo menos um token para continuar
    if (!tokens.api && !tokens.apiCartao && !tokens.cws) {
      console.error('‚ùå Nenhum token obtido. N√£o √© poss√≠vel continuar os testes.');
      return;
    }
    
    console.log('\n‚úÖ Autentica√ß√µes conclu√≠das. Continuando com testes de endpoints...');
    
    // Testar CEP v1 com token API
    if (tokens.api) {
      console.log('\nüîç [4] Testando CEP v1 com token API...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${baseURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV1}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.api}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v1 com token API:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar CEP v2 com token API
    if (tokens.api) {
      console.log('\nüîç [5] Testando CEP v2 com token API...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${baseURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV2}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.api}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v2 com token API:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar CEP v1 com token de cart√£o de postagem
    if (tokens.apiCartao) {
      console.log('\nüîç [6] Testando CEP v1 com token de cart√£o de postagem...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${baseURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV1}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.apiCartao}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v1 com token de cart√£o:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar CEP v2 com token de cart√£o de postagem
    if (tokens.apiCartao) {
      console.log('\nüîç [7] Testando CEP v2 com token de cart√£o de postagem...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${baseURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV2}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.apiCartao}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v2 com token de cart√£o:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar CEP v1 com token CWS
    if (tokens.cws) {
      console.log('\nüîç [8] Testando CEP v1 com token CWS...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${cwsURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV1}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.cws}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v1 com token CWS:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar CEP v2 com token CWS
    if (tokens.cws) {
      console.log('\nüîç [9] Testando CEP v2 com token CWS...');
      try {
        const cepTeste = '04347080';
        console.log(`üîß Consultando CEP: ${cepTeste}`);
        
        const response = await axios({
          method: 'get',
          url: `${cwsURL}${CORREIOS_ENDPOINTS.cep.consultaCepUnicoV2}${cepTeste}`,
          headers: {
            'Authorization': `Bearer ${tokens.cws}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üìç Endere√ßo:', JSON.stringify(response.data, null, 2));
      } catch (cepError) {
        console.error('‚ùå Erro ao consultar CEP v2 com token CWS:', cepError.message);
        
        if (cepError.response) {
          console.error('‚ùå Status da resposta:', cepError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(cepError.response.data || {}));
        }
      }
    }
    
    // Testar rastreamento de objetos
    if (tokens.api) {
      console.log('\nüîç [10] Testando rastreamento de objetos...');
      try {
        // C√≥digo de rastreio de exemplo
        const codigoRastreio = 'LB290764342HK';
        console.log(`üîß Rastreando objeto: ${codigoRastreio}`);
        
        const response = await axios({
          method: 'get',
          url: `${baseURL}${CORREIOS_ENDPOINTS.rastreamento.consulta}/${codigoRastreio}`,
          headers: {
            'Authorization': `Bearer ${tokens.api}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ Status da resposta: ${response.status}`);
        console.log('üì¶ Dados do rastreamento:', JSON.stringify(response.data, null, 2));
      } catch (rastreioError) {
        console.error('‚ùå Erro ao rastrear objeto:', rastreioError.message);
        
        if (rastreioError.response) {
          console.error('‚ùå Status da resposta:', rastreioError.response.status);
          console.error('‚ùå Dados da resposta:', JSON.stringify(rastreioError.response.data || {}));
        }
      }
    }
    
    console.log('\n‚úÖ Testes completos conclu√≠dos!');
    console.log('\nüìã Resumo dos resultados:');
    console.log(`- Autentica√ß√£o API direta: ${tokens.api ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    console.log(`- Autentica√ß√£o com cart√£o de postagem: ${tokens.apiCartao ? '‚úÖ Sucesso' : cartaoPostagem ? '‚ùå Falha' : '‚ö†Ô∏è N√£o testado (cart√£o n√£o configurado)'}`);
    console.log(`- Autentica√ß√£o CWS: ${tokens.cws ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    
    console.log('\nüí° Recomenda√ß√µes:');
    console.log('1. Verifique se seu contrato com os Correios inclui acesso √† API de CEP');
    console.log('2. Confirme se as credenciais est√£o corretas e ativas');
    console.log('3. Entre em contato com o suporte dos Correios para confirmar quais APIs est√£o dispon√≠veis para o seu contrato');
    console.log('4. Considere usar uma API alternativa de CEP como o BrasilAPI ou ViaCEP para consultas de CEP');
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar os testes
testarCorreiosCompleto(); 