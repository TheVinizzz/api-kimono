generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  stock         Int            @default(0)
  blingId       BigInt?        @unique
  sku           String?        @unique
  ncm           String?
  weight        Float          @default(0.5)    // Peso em kg - obrigatório para cálculo de frete
  height        Float          @default(5.0)    // Altura em cm
  width         Float          @default(25.0)   // Largura em cm  
  length        Float          @default(30.0)   // Comprimento em cm
  gtin          String?
  imageUrl      String?        // Mantém por compatibilidade, será a imagem principal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categoryId    Int?
  brandId       Int?
  orderItems    OrderItem[]
  images        ProductImage[] // Nova relação para múltiplas imagens
  variants      ProductVariant[] // Nova relação para variações de tamanho/preço
  category      Category?      @relation(fields: [categoryId], references: [id])
  brand         Brand?         @relation(fields: [brandId], references: [id])

  @@index([categoryId])
  @@index([brandId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  isMain    Boolean  @default(false) // Indica se é a imagem principal
  order     Int      @default(0)     // Ordem de exibição
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productId, order])
}

model ProductVariant {
  id         Int     @id @default(autoincrement())
  productId  Int
  size       String  // P, M, G, GG, etc.
  price      Decimal @db.Decimal(10, 2)
  stock      Int     @default(0)
  sku        String? // Código único da variação
  weight     Float?  // Peso específico da variação em kg (opcional - usa peso do produto se não informado)
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, size]) // Garantir que não há tamanhos duplicados por produto
  @@index([productId])
  @@index([size])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      UserRole  @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
}

model Order {
  id                Int              @id @default(autoincrement())
  userId            Int?
  status            OrderStatus      @default(PENDING)
  total             Decimal          @db.Decimal(10, 2)
  subtotal          Decimal?         @db.Decimal(10, 2) // Valor antes do desconto
  discountAmount    Decimal?         @db.Decimal(10, 2) // Valor do desconto aplicado
  couponId          Int?             // ID do cupom usado (se houver)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  trackingNumber    String?
  shippingCarrier   String?
  estimatedDelivery DateTime?
  departureDate     DateTime?
  currentLocation   String?
  paymentMethod     String?
  paymentStatus     String?          // Status do pagamento (PENDING, PAID, FAILED, etc.)
  paymentId         String?          // ID do pagamento no Mercado Pago
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  customerDocument  String?          // CPF/CNPJ do cliente
  shippingAddress   String?
  shippingMethod    String?          // STANDARD, EXPRESS, LOCAL_PICKUP
  shippingCost      Decimal?         @db.Decimal(10, 2) // Custo do frete
  labelPrinted      Boolean          @default(false) // Indica se a etiqueta de envio foi impressa
  labelPrintedAt    DateTime?        // Data/hora da impressão da etiqueta
  user              User?            @relation(fields: [userId], references: [id])
  coupon            Coupon?          @relation(fields: [couponId], references: [id])
  items             OrderItem[]
  trackingUpdates   ShipmentUpdate[]

  @@index([userId])
  @@index([paymentId])
  @@index([customerEmail])
  @@index([labelPrinted])
  @@index([shippingMethod])
  @@index([couponId])
}

model OrderItem {
  id               Int             @id @default(autoincrement())
  orderId          Int
  productId        Int
  productVariantId Int?            // Nova relação opcional com variação
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  size             String?         // Tamanho selecionado (para referência)
  order            Order           @relation(fields: [orderId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([productVariantId])
}

model ShipmentUpdate {
  id          Int      @id @default(autoincrement())
  orderId     Int
  status      String
  location    String?
  description String?
  timestamp   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Address {
  id           String   @id @default(uuid())
  userId       Int
  name         String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PageVisit {
  id             Int      @id @default(autoincrement())
  url            String
  path           String
  userAgent      String?
  ipAddress      String?
  referrer       String?
  userId         Int?
  sessionId      String?
  timestamp      DateTime @default(now())
  deviceType     String?
  browserName    String?
  operatingSystem String?
  country        String?
  city           String?

  @@index([path])
  @@index([timestamp])
  @@index([userId])
  @@index([sessionId])
}

model AppSettings {
  id                 Int       @id @default(autoincrement())
  key                String    @unique
  value              String
  description        String?
  category           String    @default("general")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  originCompanyName  String    @default("Kimono Store - Artes Marciais")
  originStreet       String    @default("Rua das Artes Marciais, 456")
  originNeighborhood String    @default("Vila Olímpia")
  originCity         String    @default("São Paulo")
  originState        String    @default("SP")
  originZipCode      String    @default("04551-070")
  originPhone        String    @default("(11) 98765-4321")
  originEmail        String    @default("contato@kimonostore.com.br")
  originCnpj         String    @default("12.345.678/0001-90")
  originStateReg     String    @default("000.000.000.000") // Inscrição Estadual

  @@index([category])
  @@index([key])
}

// Controle de numeração sequencial das notas fiscais
model InvoiceNumber {
  id            Int      @id @default(autoincrement())
  lastNumber    Int      @default(0)
  series        String   @default("1")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Sistema de Cupons de Desconto
model Coupon {
  id              Int        @id @default(autoincrement())
  code            String     @unique // Código único do cupom
  name            String     // Nome/descrição do cupom
  description     String?    // Descrição detalhada
  type            CouponType // Tipo de desconto (PERCENTAGE ou FIXED)
  value           Decimal    @db.Decimal(10, 2) // Valor do desconto (percentual ou valor fixo)
  minOrderValue   Decimal?   @db.Decimal(10, 2) // Valor mínimo do pedido para usar o cupom
  maxDiscount     Decimal?   @db.Decimal(10, 2) // Desconto máximo (para cupons percentuais)
  maxUses         Int?       // Número máximo de usos (null = ilimitado)
  usedCount       Int        @default(0) // Número de vezes já usado
  isActive        Boolean    @default(true) // Se o cupom está ativo
  validFrom       DateTime   @default(now()) // Data de início da validade
  validUntil      DateTime?  // Data de fim da validade (null = sem prazo)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  orders          Order[]    // Pedidos que usaram este cupom

  @@index([code])
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

enum CouponType {
  PERCENTAGE // Desconto percentual
  FIXED      // Desconto em valor fixo
}
