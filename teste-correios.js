// Script para testar a integra√ß√£o com os Correios
// Execute: node teste-correios.js

require('dotenv').config();
const axios = require('axios');

// Configura√ß√£o da API
const API_URL = process.env.API_URL || 'http://localhost:4000';
const API_BASE = `${API_URL}/api`;

// Obter token JWT de admin (voc√™ precisar√° gerar um token v√°lido)
// Para testes, voc√™ pode usar o endpoint de login para obter um token
async function obterTokenAdmin() {
  try {
    // Se voc√™ j√° tem um token fixo para testes, pode us√°-lo diretamente
    const tokenFixo = process.env.ADMIN_TOKEN;
    if (tokenFixo) {
      console.log('‚úÖ Usando token fixo de ambiente');
      return tokenFixo;
    }
    
    // Caso contr√°rio, tenta fazer login
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: process.env.ADMIN_EMAIL || 'admin@example.com',
      password: process.env.ADMIN_PASSWORD || 'senha123'
    });
    
    console.log('‚úÖ Login realizado com sucesso');
    return loginResponse.data.token;
  } catch (error) {
    console.error('‚ùå Erro ao obter token:', error.message);
    console.log('‚ö†Ô∏è Use um token fixo definindo a vari√°vel ADMIN_TOKEN');
    return null;
  }
}

// Testar configura√ß√£o dos Correios
async function testarConfiguracao(token) {
  try {
    console.log('\n1Ô∏è‚É£ Testando configura√ß√£o dos Correios...');
    
    const response = await axios.get(`${API_BASE}/correios/testar-conexao`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Configura√ß√£o dos Correios:', response.data.message);
    return true;
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error.response?.data?.error || error.message);
    
    // Verificar problemas espec√≠ficos
    if (error.response?.status === 400) {
      console.log('‚ö†Ô∏è Verifique se todas as vari√°veis de ambiente dos Correios est√£o configuradas');
    } else if (error.response?.status === 401) {
      console.log('‚ö†Ô∏è Token de autentica√ß√£o inv√°lido ou expirado');
    }
    
    return false;
  }
}

// Gerar c√≥digo de rastreio para um pedido
async function gerarCodigoRastreio(token, orderId) {
  try {
    console.log(`\n2Ô∏è‚É£ Gerando c√≥digo de rastreio para pedido ${orderId}...`);
    
    const response = await axios.post(
      `${API_BASE}/correios/gerar-rastreio/${orderId}`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ C√≥digo gerado com sucesso!');
    console.log('üì¶ Pedido:', response.data.orderId);
    console.log('üî¢ C√≥digo de rastreio:', response.data.trackingNumber);
    
    return response.data.trackingNumber;
  } catch (error) {
    console.error('‚ùå Erro ao gerar c√≥digo:', error.response?.data?.error || error.message);
    
    // Verificar problemas espec√≠ficos
    if (error.response?.status === 400) {
      console.log('‚ö†Ô∏è Poss√≠veis causas:');
      console.log('  - Pedido n√£o encontrado');
      console.log('  - Pedido n√£o est√° pago');
      console.log('  - Endere√ßo de entrega inv√°lido');
      console.log('  - Configura√ß√£o dos Correios incompleta');
    }
    
    return null;
  }
}

// Processar todos os pedidos pagos
async function processarPedidosPagos(token) {
  try {
    console.log('\n3Ô∏è‚É£ Processando todos os pedidos pagos...');
    
    const response = await axios.post(
      `${API_BASE}/correios/processar-pedidos`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ Processamento iniciado:', response.data.message);
    return true;
  } catch (error) {
    console.error('‚ùå Erro no processamento:', error.response?.data?.error || error.message);
    return false;
  }
}

// Rastrear um c√≥digo
async function rastrearCodigo(codigo) {
  try {
    console.log(`\n4Ô∏è‚É£ Rastreando c√≥digo ${codigo}...`);
    
    const response = await axios.get(`${API_BASE}/correios/rastrear/${codigo}`);
    
    console.log('‚úÖ Informa√ß√µes de rastreamento:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao rastrear:', error.response?.data?.error || error.message);
    
    if (error.response?.status === 404) {
      console.log('‚ö†Ô∏è C√≥digo de rastreio n√£o encontrado ou inv√°lido');
    }
    
    return null;
  }
}

// Fun√ß√£o principal para executar todos os testes
async function executarTestes() {
  try {
    console.log('üöÄ Iniciando testes da integra√ß√£o com os Correios...\n');
    
    // 1. Obter token de admin
    console.log('üîë Obtendo token de autentica√ß√£o...');
    const token = await obterTokenAdmin();
    
    if (!token) {
      console.error('‚ùå N√£o foi poss√≠vel obter um token v√°lido. Testes abortados.');
      return;
    }
    
    // 2. Testar configura√ß√£o
    const configOk = await testarConfiguracao(token);
    
    if (!configOk) {
      console.warn('‚ö†Ô∏è Configura√ß√£o com problemas. Continuando testes...');
    }
    
    // 3. Gerar c√≥digo para um pedido espec√≠fico
    // Substitua pelo ID de um pedido real que esteja no status PAID
    const orderId = process.argv[2] || 1;
    const codigoRastreio = await gerarCodigoRastreio(token, orderId);
    
    // 4. Processar todos os pedidos pagos
    await processarPedidosPagos(token);
    
    // 5. Rastrear um c√≥digo (pode ser o gerado ou um exemplo)
    const codigoParaRastrear = codigoRastreio || 'BR123456789BR';
    await rastrearCodigo(codigoParaRastrear);
    
    console.log('\nüéâ Testes conclu√≠dos!');
    
  } catch (error) {
    console.error('\n‚ùå Erro geral nos testes:', error.message);
  }
}

// Executar testes se for chamado diretamente
if (require.main === module) {
  executarTestes();
}

module.exports = {
  testarConfiguracao,
  gerarCodigoRastreio,
  processarPedidosPagos,
  rastrearCodigo,
  executarTestes
}; 