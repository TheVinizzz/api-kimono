generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  stock         Int            @default(0)
  imageUrl      String? // Mantém por compatibilidade, será a imagem principal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categoryId    Int?
  orderItems    OrderItem[]
  images        ProductImage[] // Nova relação para múltiplas imagens
  category      Category?      @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  isMain    Boolean  @default(false) // Indica se é a imagem principal
  order     Int      @default(0) // Ordem de exibição
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productId, order])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      UserRole  @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
}

model Order {
  id                Int              @id @default(autoincrement())
  userId            Int?
  status            OrderStatus      @default(PENDING)
  total             Decimal          @db.Decimal(10, 2)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  trackingNumber    String?
  shippingCarrier   String?
  estimatedDelivery DateTime?
  departureDate     DateTime?
  currentLocation   String?
  paymentMethod     String?
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  shippingAddress   String?
  user              User?            @relation(fields: [userId], references: [id])
  items             OrderItem[]
  trackingUpdates   ShipmentUpdate[]

  @@index([userId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ShipmentUpdate {
  id          Int      @id @default(autoincrement())
  orderId     Int
  status      String
  location    String?
  description String?
  timestamp   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Address {
  id           String   @id @default(uuid())
  userId       Int
  name         String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PageVisit {
  id              Int      @id @default(autoincrement())
  url             String
  path            String
  userAgent       String?
  ipAddress       String?
  referrer        String?
  userId          Int?
  sessionId       String?
  timestamp       DateTime @default(now())
  deviceType      String?
  browserName     String?
  operatingSystem String?
  country         String?
  city            String?

  @@index([path])
  @@index([timestamp])
  @@index([userId])
  @@index([sessionId])
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}
