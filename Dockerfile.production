# Dockerfile otimizado para produção
FROM node:20-alpine

# Instalar dependências necessárias
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    dumb-init

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json tsconfig.json ./

# Instalar dependências de produção
RUN npm ci --only=production && npm cache clean --force

# Copiar código fonte
COPY . .

# Gerar Prisma client
RUN npx prisma generate

# Compilar TypeScript
RUN npm run build

# Instalar bcryptjs para compatibilidade com Alpine
RUN npm uninstall bcrypt 2>/dev/null || true && npm install bcryptjs

# Alterar ownership dos arquivos
RUN chown -R nextjs:nodejs /app
USER nextjs

# Definir variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=4000

# Expor porta
EXPOSE 4000

# Usar dumb-init para gerenciar processos
ENTRYPOINT ["dumb-init", "--"]

# Comando para iniciar a aplicação
CMD ["npm", "start"]